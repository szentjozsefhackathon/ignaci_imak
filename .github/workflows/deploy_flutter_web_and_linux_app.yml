name: Deploy Flutter Web and Linux App

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allows manual trigger

jobs:
  deploy:
    name: Build & Release
    runs-on: ubuntu-latest

    steps:
      #1. Check out the repository
      - name: Checkout Flutter Repository
        uses: actions/checkout@v4

      #2 Setup Java
      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'oracle'
          java-version: '17'

      #3 Setup Flutter
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'

      #4 Check Flutter Doctor
      - name: Check Flutter Doctor
        run: flutter doctor -v

      #5 Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

      #6 Build JSON Serialization
      - name: Run build_runner
        run: dart run build_runner build
      
      # #11 Check if Tag Exists
      # - name: Check if Tag Exists
      #   id: check_tag
      #   run: |
      #     if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
      #       echo "TAG_EXISTS=true" >> $GITHUB_ENV
      #     else
      #       echo "TAG_EXISTS=false" >> $GITHUB_ENV
      #     fi

      # #12 Modify Tag if it Exists
      # - name: Modify Tag
      #   if: env.TAG_EXISTS == 'true'
      #   id: modify_tag
      #   run: |
      #     new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
      #     echo "VERSION=$new_version" >> $GITHUB_ENV


      ################### WEB APP ###################
      #5 Building web app
      - name: Build Flutter Web App
        run: flutter build web --release --base-href="/flutter/"

      # 7. Log in to GHCR
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 8. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
  
      # 9. Build and Push the Docker flutter-web image
      - name: Build and Push Flutter Web
        uses: docker/build-push-action@v5
        with:
          context: ./build/web
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/ignacio-flutter-web:latest
            ghcr.io/${{ github.repository_owner }}/ignacio-flutter-web:${{ github.sha }}

      # 5. Confirm Success
      - name: Verify Image
        run: |
          echo "Docker image has been pushed to:"
          echo "ghcr.io/${{ github.repository_owner }}/ignacio-flutter-web:latest"
          echo "ghcr.io/${{ github.repository_owner }}/ignacio-flutter-web:${{ github.sha }}"


      # TODO: Uncomment the following lines to deploy the app to a server 
      # - name: Deploy to Server
      #   uses: appleboy/scp-action@v0.2.4
      #   with:
      #     host: your.server.ip
      #     username: your-username
      #     password: ${{ secrets.SERVER_PASSWORD }}
      #     source: flutter-project/build/web/
      #     target: /path/to/deployment/folder/


      ################### LINUX APP ###################

      # Step 2: Install dependencies
      - name: Install Build Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ninja-build cmake

      # Step 3: Configure CMake
      - name: Configure CMake
        run: |
          mkdir -p build
          cd build
          cmake -G Ninja -DCMAKE_CXX_COMPILER=g++ ..

      #6 Building linux app
      - name: Build Flutter Linux App
        run: flutter build linux --release

      #10 Extract Version
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      # #13 Create Release
      # - name: Create Release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     artifacts: "build/linux/x64/release/bundle/ignacio_prayers_flutter_application"
      #     tag: v${{ env.VERSION }}
      #     token: ${{ secrets.TOKEN }}
